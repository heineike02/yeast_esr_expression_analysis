print("loaded 1070820")
## try http:// if https:// URLs are not supported
#source("https://bioconductor.org/biocLite.R")
#biocLite()
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
## try http:// if https:// URLs are not supported
#source("https://bioconductor.org/biocLite.R")
#biocLite()
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
print("loaded 1070820")
library(DESeq2)
library(ggplot2)
library(reshape2)
library(lattice)
base_dir = "C:\\Users\\BMH_work\\github\\expression_broad_data\\expression_data\\kl_sc_PKA_as_m24_r1g1_20181017\\"
print(base_dir)
#Load raw count data for each species from experiment.
countDataList = list(KL = NULL,SC  = NULL)
metaDataList = list(KL = NULL,SC  = NULL)
for (exp_species in c("KL","SC")){
print(paste("species is ", exp_species))
cts <- paste(base_dir,"20181017_countdata_",exp_species,".csv",sep = "")
countData = read.csv(cts, row.names = 1, header = TRUE)
#selecting out a subset:
# countData = countData[,c("7001","7002")]
# #this metadata file comes from a python routine.
# meta <- paste(base_dir,"20170817_klscpka_metadata_deseq_",exp_species,".csv",sep = "")
# metaData = read.csv(meta, row.names = 1)
# colnames(countData) = row.names(metaData)
# countDataList[[exp_species]]=countData
# metaDataList[[exp_species]]=metaData
# print(metaData)
# print(countData)
#
# #Turns all kl imported data into a DESeqDataSet
# dds_all = DESeqDataSetFromMatrix(countData = countData, colData = metaData, design = ~strain+NMPP1+media+time)
# print(dds_all)
# #If there are any rows with zero or one count, this command removes them, (in this dataset there are not)
# paste(nrow(dds_all[ rowSums(counts(dds_all)) <= 1, ]), "items removed from Kl count data because there were no counts")
# dds_all_filtered = dds_all[ rowSums(counts(dds_all)) > 1, ]
#
# #Finds rlog values and prints to file
#
# #uses all default options except blind = FALSE instead of true
# #Note from documentation:
# #If many of genes have large differences in counts due to the experimental design,it is important to set blind=FALSE for downstream analysis.
#
# rld_all <- rlog(dds_all_filtered, blind = FALSE)  #, fitType = 'local')
# rlog_all <- assay(rld_all)
# #head(rlog_all)
# #plot(rlog_all[,"7050"],rlog_all[,"7002"])
#
# write.csv(as.data.frame(rlog_all), file=paste(base_dir,"20170817_klscpka_rlog_",exp_species,".csv",sep = ""))
#
#
}
# klMetaData <- metaData[c("AS1_minus","AS2_minus", "WT_minus","WT_plus", "AS1_plus","AS2_plus"),]
# #Combines final two columns of metadata
# klMetaData$condition = paste(klMetaData$strain,klMetaData$NMPP1,sep="_")
# klMetaData = klMetaData[ , "condition", drop = FALSE]
# klMetaData$condition = as.factor(klMetaData$condition)  #Avoid error message since this starts as a character.
View(countData)
#Load raw count data for each species from experiment.
countDataList = list(KL = NULL,SC  = NULL)
metaDataList = list(KL = NULL,SC  = NULL)
for (exp_species in c("KL","SC")){
print(paste("species is ", exp_species))
cts <- paste(base_dir,"20181017_countdata_",exp_species,".csv",sep = "")
countData = read.csv(cts, row.names = 1, header = TRUE)
#selecting out a subset:
# countData = countData[,c("7001","7002")]
#this metadata file comes from the python script 20181025_sequencingQC_and_counts_file.ipynb.
meta <- paste(base_dir,"20170817_metadata_deseq_",exp_species,".csv",sep = "")
metaData = read.csv(meta, row.names = 1)
colnames(countData) = row.names(metaData)
countDataList[[exp_species]]=countData
metaDataList[[exp_species]]=metaData
print(metaData)
print(countData)
#
# #Turns all kl imported data into a DESeqDataSet
# dds_all = DESeqDataSetFromMatrix(countData = countData, colData = metaData, design = ~strain+NMPP1+media+time)
# print(dds_all)
# #If there are any rows with zero or one count, this command removes them, (in this dataset there are not)
# paste(nrow(dds_all[ rowSums(counts(dds_all)) <= 1, ]), "items removed from Kl count data because there were no counts")
# dds_all_filtered = dds_all[ rowSums(counts(dds_all)) > 1, ]
#
# #Finds rlog values and prints to file
#
# #uses all default options except blind = FALSE instead of true
# #Note from documentation:
# #If many of genes have large differences in counts due to the experimental design,it is important to set blind=FALSE for downstream analysis.
#
# rld_all <- rlog(dds_all_filtered, blind = FALSE)  #, fitType = 'local')
# rlog_all <- assay(rld_all)
# #head(rlog_all)
# #plot(rlog_all[,"7050"],rlog_all[,"7002"])
#
# write.csv(as.data.frame(rlog_all), file=paste(base_dir,"20170817_klscpka_rlog_",exp_species,".csv",sep = ""))
#
#
}
#Load raw count data for each species from experiment.
countDataList = list(KL = NULL,SC  = NULL)
metaDataList = list(KL = NULL,SC  = NULL)
for (exp_species in c("KL","SC")){
print(paste("species is ", exp_species))
cts <- paste(base_dir,"20181017_countdata_",exp_species,".csv",sep = "")
countData = read.csv(cts, row.names = 1, header = TRUE)
#selecting out a subset:
# countData = countData[,c("7001","7002")]
#this metadata file comes from the python script 20181025_sequencingQC_and_counts_file.ipynb.
meta <- paste(base_dir,"20170817_metadata_deseq_",exp_species,".csv",sep = "")
metaData = read.csv(meta, row.names = 1)
colnames(countData) = row.names(metaData)
countDataList[[exp_species]]=countData
metaDataList[[exp_species]]=metaData
print(metaData)
print(countData)
#
# #Turns all kl imported data into a DESeqDataSet
# dds_all = DESeqDataSetFromMatrix(countData = countData, colData = metaData, design = ~strain+NMPP1+media+time)
# print(dds_all)
# #If there are any rows with zero or one count, this command removes them, (in this dataset there are not)
# paste(nrow(dds_all[ rowSums(counts(dds_all)) <= 1, ]), "items removed from Kl count data because there were no counts")
# dds_all_filtered = dds_all[ rowSums(counts(dds_all)) > 1, ]
#
# #Finds rlog values and prints to file
#
# #uses all default options except blind = FALSE instead of true
# #Note from documentation:
# #If many of genes have large differences in counts due to the experimental design,it is important to set blind=FALSE for downstream analysis.
#
# rld_all <- rlog(dds_all_filtered, blind = FALSE)  #, fitType = 'local')
# rlog_all <- assay(rld_all)
# #head(rlog_all)
# #plot(rlog_all[,"7050"],rlog_all[,"7002"])
#
# write.csv(as.data.frame(rlog_all), file=paste(base_dir,"20170817_klscpka_rlog_",exp_species,".csv",sep = ""))
#
#
}
#Load raw count data for each species from experiment.
countDataList = list(KL = NULL,SC  = NULL)
metaDataList = list(KL = NULL,SC  = NULL)
for (exp_species in c("KL","SC")){
print(paste("species is ", exp_species))
cts <- paste(base_dir,"20181017_countdata_",exp_species,".csv",sep = "")
countData = read.csv(cts, row.names = 1, header = TRUE)
#selecting out a subset:
# countData = countData[,c("7001","7002")]
#this metadata file comes from the python script 20181025_sequencingQC_and_counts_file.ipynb.
meta <- paste(base_dir,"20170817_metadata_deseq_",exp_species,".csv",sep = "")
metaData = read.csv(meta, row.names = 1)
colnames(countData) = row.names(metaData)
countDataList[[exp_species]]=countData
metaDataList[[exp_species]]=metaData
print(metaData)
print(countData)
#
# #Turns all kl imported data into a DESeqDataSet
# dds_all = DESeqDataSetFromMatrix(countData = countData, colData = metaData, design = ~strain+NMPP1+media+time)
# print(dds_all)
# #If there are any rows with zero or one count, this command removes them, (in this dataset there are not)
# paste(nrow(dds_all[ rowSums(counts(dds_all)) <= 1, ]), "items removed from Kl count data because there were no counts")
# dds_all_filtered = dds_all[ rowSums(counts(dds_all)) > 1, ]
#
# #Finds rlog values and prints to file
#
# #uses all default options except blind = FALSE instead of true
# #Note from documentation:
# #If many of genes have large differences in counts due to the experimental design,it is important to set blind=FALSE for downstream analysis.
#
# rld_all <- rlog(dds_all_filtered, blind = FALSE)  #, fitType = 'local')
# rlog_all <- assay(rld_all)
# #head(rlog_all)
# #plot(rlog_all[,"7050"],rlog_all[,"7002"])
#
# write.csv(as.data.frame(rlog_all), file=paste(base_dir,"20170817_klscpka_rlog_",exp_species,".csv",sep = ""))
#
#
}
